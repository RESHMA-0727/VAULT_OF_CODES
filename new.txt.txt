*PERSONAL TO DO LIST*

import datetime
import json
import os
import uuid

class ToDoList:
    def _init_(self, filename):
        self.filename = filename
        self.tasks = self.load_tasks()

    def load_tasks(self):
        if os.path.exists(self.filename):
            with open(self.filename, 'r') as file:
                return json.load(file)
        else:
            return {}

    def save_tasks(self):
        with open(self.filename, 'w') as file:
            json.dump(self.tasks, file, indent=4)

    def add_task(self):
        task_name = input("Enter task name: ")
        due_date = self.get_valid_date("Enter due date (YYYY-MM-DD): ")
        priority = self.get_valid_priority("Enter priority (High/Medium/Low): ")
        task_id = str(uuid.uuid4())
        self.tasks[task_id] = {
            "task_name": task_name,
            "due_date": due_date,
            "priority": priority,
            "completed": False
        }
        self.save_tasks()
        printf("Task '{task_name}' added successfully!")

    def view_tasks(self):
        if not self.tasks:
            print("No tasks available.")
        else:
            print("Your Tasks:")
            for task_id, task in self.tasks.items():
                status = "Completed" if task["completed"] else "Pending"
                printf("{task_id}. {task['task_name']} (Due: {task['due_date']}, Priority: {task['priority']}, Status: {status}")

    def delete_task(self):
        task_id = input("Enter task ID to delete: ")
        if task_id in self.tasks:
            del self.tasks[task_id]
            self.save_tasks()
            printf("Task {task_id} deleted successfully!")
        else:
            printf("Task {task_id} not found.")

    def update_task(self):
        task_id = input("Enter task ID to update: ")
        if task_id in self.tasks:
            task_name = input("Enter new task name: ")
            due_date = self.get_valid_date("Enter new due date (YYYY-MM-DD): ")
            priority = self.get_valid_priority("Enter new priority (High/Medium/Low): ")
            self.tasks[task_id] = {
                "task_name": task_name,
                "due_date": due_date,
                "priority": priority,
                "completed": self.tasks[task_id]["completed"]
            }
            self.save_tasks()
            printf("Task {task_id} updated successfully!")
        else:
            print(f"Task {task_id} not found.")

    def complete_task(self):
        task_id = input("Enter task ID to complete: ")
        if task_id in self.tasks:
            self.tasks[task_id]["completed"] = True
            self.save_tasks()
            printf("Task {task_id} marked as completed!")
        else:
            printf("Task {task_id} not found.")

    @staticmethod
    def get_valid_date(prompt):
        while True:
            try:
                date = input(prompt)
                datetime.datetime.strptime(date, "%Y-%m-%d")
                return date
            except ValueError:
                print("Invalid date format. Please use YYYY-MM-DD.")

    @staticmethod
    def get_valid_priority(prompt):
        while True:
            priority = input(prompt)
            if priority in ["High", "Medium", "Low"]:
                return priority
            print("Invalid priority. Please choose High, Medium, or Low.")

def main():
    list.py = "tasks.json"
    todo = ToDoList(list.py)

    print("Welcome to your Personal To-Do List!")
    print("Manage your tasks efficiently and stay organized!")

    while True:
        print("\nTo-Do List Menu:")
        print("1. Add Task")
        print("2. View Tasks")
        print("3. Delete Task")
        print("4. Update Task")
        print("5. Complete Task")
        print("6. Exit")

        choice = input("Enter your choice: ")

        try:
            if choice == "1":
                todo.add_task()
            elif choice == "2":
                todo.view_tasks()
            elif choice == "3":
                todo.delete_task()
            elif choice == "4":
                todo.update_task()
            elif choice == "5":
                todo.complete_task()
            elif choice == "6":
                print("Exiting To-Do List.")
                break
            else:
                print("Invalid choice. Please try again.")
        except Exception as e:
            print(f"An error occurred: {str(e)}")

if _name_ == "_main_":
    main()